# Загрузка поддержки взаимодействия с ROS
import("rtt_ros");
ros.import("rtt_rospack");
ros.import("sweetie_bot_logger");
ros.import("rtt_sensor_msgs");
ros.import("rtt_sweetie_bot_kinematics_msgs");

ros.import("rtt_rospack");  # Разрешение путей ROS: операци ros.find(<package name>)
ros.import("rtt_rosparam");

require("print");
import("sweetie_bot_robot_model");

import("sweetie_bot_kinematics");

# Logger
require("log4cpp"); # add log4cpp service
log4cpp.default_root_category = "sweetie_bot.motion";
log4cpp.configure(ros.find("sweetie_bot_kinematics") + "/scripts/config.log4cpp"); # load configuration from file
log4cpp.addRosAppender("sweetie_bot", 20); # redirect sweetie_bot to /rosout

loadComponent("sweetie_bot_kinematics", "sweetie_bot::motion::Kinematics");
loadService("sweetie_bot_kinematics","rosparam");
loadService("sweetie_bot_kinematics","marshalling"); # Поддержка исполнения скриптов и загрузки xml/cpf файлов

# Загружаем параметры из xml файла.
sweetie_bot_kinematics.marshalling.loadProperties(ros.find("sweetie_bot_description_proto2") + "/robots/chains.cpf");
sweetie_bot_kinematics.rosparam.getParam("/", "robot_model");

# Create ROS mapping
stream("sweetie_bot_kinematics.in_joints_seed_sorted", ros.topic("/kinematics/input_joint_seed"));
stream("sweetie_bot_kinematics.in_joints_sorted", ros.topic("/kinematics/input_joint_state"));
stream("sweetie_bot_kinematics.in_limbs", ros.topic("/kinematics/input_limb_state"));
stream("sweetie_bot_kinematics.out_joints", ros.topic("/kinematics/output_joint_state"));
stream("sweetie_bot_kinematics.out_limbs", ros.topic("/kinematics/output_limb_state"));

sweetie_bot_kinematics.configure();
sweetie_bot_kinematics.start();
